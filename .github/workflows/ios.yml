name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  projectName: CDSample

jobs:
  build:
    runs-on: macOS-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: install swiftlint
        run: |
          brew install swiftlint
      - name: run swiftlint
        run: swiftlint
        continue-on-error: true
        
  build-test-lint-deploy:
    runs-on: macos-latest

    steps:
    # Checkout the repo
    - name: Checkout Repository
      uses: actions/checkout@v4

    # Set up Ruby (for Fastlane or bundler, if needed)
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2

    # Install SwiftLint
    - name: Install SwiftLint
      run: brew install swiftlint

    # Run SwiftLint
    - name: Lint Swift Code
      run: swiftlint

    # Build the Xcode project
    - name: Build Project
      run: |
        xcodebuild clean build \
        -project CDSample.xcodeproj \
        -scheme CDSample \

    # Run Unit Tests
    - name: Run Unit Tests
      run: |
        xcodebuild test \
        -project CDSample.xcodeproj \
        -scheme CDSample \
        -sdk iphonesimulator \
        -destination 'platform=iOS Simulator,name=iPhone 14,OS=17.0'

    # Optional: Deploy via Firebase App Distribution (example)
    - name: Deploy to Firebase
      if: github.ref == 'refs/heads/main'
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        curl -sL https://firebase.tools | bash
        firebase appdistribution:distribute build/YourApp.ipa \
          --app YOUR_FIREBASE_APP_ID \
          --groups testers \
          --token "$FIREBASE_TOKEN"
          
  build-and-test:
    # The type of runner that the job will run on.
    # macOS runners are necessary for Xcode projects.
    runs-on: macos-latest

    # Environment variables for the job.
    # Replace 'YourApp' with the actual name of your Xcode project and scheme.
    env:
      XCODE_PROJECT: CDSample.xcodeproj # e.g., MySwiftUIApp.xcodeproj
      XCODE_SCHEME: CDSample             # e.g., MySwiftUIApp
      # Specify the target simulator or device for testing.
      # You can find available simulators using `xcrun simctl list devices`.
      IOS_SIMULATOR: iPhone 15 Pro Max

    # Sequence of steps that will be executed as part of this job.
    steps:
      - name: Checkout Code
        # Uses the official action to checkout your repository code.
        uses: actions/checkout@v4

      - name: Build Project
        # Builds the Xcode project for a generic iOS device.
        # This checks if the code compiles successfully.
        run: |
          echo "Building the project..."
          xcodebuild build \
            -project "$CDSample" \
            -scheme "$CDSample" \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            | xcpretty # Optional: for better formatting of xcodebuild output

      - name: Run Tests
        # Runs all unit and UI tests defined in your project.
        # Replace 'YourAppTests' if your test scheme is different.
        run: |
          echo "Running tests..."
          xcodebuild test \
            -project "$CDSample" \
            -scheme "$CDSample" \
            -destination "platform=iOS Simulator,name=$IOS_SIMULATOR" \
            | xcpretty # Optional: for better formatting of xcodebuild output
